WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }
comma = _{ "," }

literal_number = ${ ("+" | "-")? ~ ((ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT*)?) | ("." ~ ASCII_DIGIT+)) ~ (("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+)? }

variable_name = @{ ("_" | LOWERCASE) ~ (ALPHABETIC | NUMBER | "_")* }

expression = { term ~ (operator ~ term)* }
term = { literal_number
       | if_then_else
       | function_call
       | variable_name
       | ("(" ~ expression ~ ")") }
operator = { "+" | "-" | "*" | "/" | ">" | "<" | ">=" | "<=" | "==" | "!=" }

if_then_else = { if_keyword ~ expression ~ then_keyword ~ expression ~ else_keyword ~ expression }

function_call = ${ function_name ~ function_call_arguments }
function_call_arguments = !{ "(" ~ (expression ~ (comma ~ expression)* ~ comma?)? ~ ")" }
function_name = @{ (LOWERCASE) ~ (ALPHABETIC | NUMBER | "_")* }

keyword_after = _{ WHITESPACE | COMMENT }
def_keyword = @{ "def" ~ keyword_after }
extern_keyword = @{ "extern" ~ keyword_after }
if_keyword = @{ "if" ~ keyword_after }
then_keyword = @{ "then" ~ keyword_after }
else_keyword = @{ "else" ~ keyword_after }

function_decleration = { def_keyword ~ function_prototype ~ expression }
extern_function = { extern_keyword ~ function_prototype }
function_prototype = ${ function_name ~ function_prototype_arguments }
function_prototype_arguments = !{ "(" ~ (variable_name ~ (comma ~ variable_name)* ~ comma?)? ~ ")" }

toplevel = { function_decleration | extern_function | expression }
file = { SOI ~ (toplevel ~ ";"?)+ ~ EOI }

